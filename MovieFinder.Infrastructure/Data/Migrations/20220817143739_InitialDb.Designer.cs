// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieFinder.Infrastructure.Data;

#nullable disable

namespace MovieFinder.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20220817143739_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("MovieFinder.Core.Entities.Actor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Director", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Title", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Runtime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoryLine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleActor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("TitleId");

                    b.ToTable("TitleActors");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TitleId");

                    b.ToTable("TitleCategories");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleDirector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("TitleId");

                    b.ToTable("TitleDirectors");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleWriter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WriterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.HasIndex("WriterId");

                    b.ToTable("TitleWriters");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Writer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleActor", b =>
                {
                    b.HasOne("MovieFinder.Core.Entities.Actor", "Actor")
                        .WithMany("TitleActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieFinder.Core.Entities.Title", "Title")
                        .WithMany("TitleActors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleCategory", b =>
                {
                    b.HasOne("MovieFinder.Core.Entities.Category", "Category")
                        .WithMany("TitleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieFinder.Core.Entities.Title", "Title")
                        .WithMany("TitleCategories")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleDirector", b =>
                {
                    b.HasOne("MovieFinder.Core.Entities.Director", "Director")
                        .WithMany("TitleDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieFinder.Core.Entities.Title", "Title")
                        .WithMany("TitleDirectors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.TitleWriter", b =>
                {
                    b.HasOne("MovieFinder.Core.Entities.Title", "Title")
                        .WithMany("TitleWriters")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieFinder.Core.Entities.Writer", "Writer")
                        .WithMany("TitleWriters")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Actor", b =>
                {
                    b.Navigation("TitleActors");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Category", b =>
                {
                    b.Navigation("TitleCategories");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Director", b =>
                {
                    b.Navigation("TitleDirectors");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Title", b =>
                {
                    b.Navigation("TitleActors");

                    b.Navigation("TitleCategories");

                    b.Navigation("TitleDirectors");

                    b.Navigation("TitleWriters");
                });

            modelBuilder.Entity("MovieFinder.Core.Entities.Writer", b =>
                {
                    b.Navigation("TitleWriters");
                });
#pragma warning restore 612, 618
        }
    }
}
